[project]
# Used by cx_Freeze
name = "apc-lemmy-bot"
version = "0.5.1"
description = "Post supabase events to a Lemmy instance or show them."
maintainers = [
    {name="Carles Muñoz Gorriz", email="carlesmu@internautas.org"}
]
authors = [
    {name="Carles Muñoz Gorriz", email="carlesmu@internautas.org"}
]
license = "AGPL-3.0-or-later"
readme = "README.md"
keywords = ["lemmy"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Operating System :: OS Independent",
]
requires-python = ">=3.10,<3.14"
dependencies = [
    "typer (>=0.16.0,<1.0.0)",
    "typing-extensions (>=4.13.2,<5.0.0)",
    "supabase (>=2.15.2,<3.0.0)",
    "pythorhead (>=0.33.0,!=0.34.0,<1.0.0)",
    "sqlalchemy (>=2.0.41,<2.1.0)",
    "sqlalchemy-utils (>=0.41.2,<0.42.0)",
]

[project.scripts]
apc_lemmy_bot = "apc_lemmy_bot.__main__:main"

[tool.poetry]
packages = [
    {include = "apc_lemmy_bot"}
]
include = [
    "CHANGELOG.md",
    { path = "scripts", format = ["sdist"] },
]
exclude = []

[tool.poetry.dependencies]
python = ">=3.11,<3.14"

[tool.poetry.group.dev.dependencies]
black = ">=25.1.0,<26.0.0"
commitizen = ">=4.8.2,<5.0.0"
cx-freeze = ">=8.3.0,<9.0.0"
mypy = ">=1.16.0,<2.0.0"
poetry = ">=2.1.3,<3.0.0"
pre-commit = ">=4.2.0,<5.0.0"
pydocstyle = "^6.3.0"
pylint = {extras = ["spelling"], version = ">=3.3.7,<4.0.0"}
trove-classifiers = "^2025.3.19.19"  # for classifiers in this file
sqlalchemy = {extras = ["mypy"], version = ">=2.0.41,<2.1.0"}  # same version that dependencies=...
taskipy = ">=1.14.1,<2.0.0"
types-sqlalchemy-utils = "^1.1.0"
sphinx-autoapi = ">=3.6.0,<4.0.0"

[tool.commitizen]
# See: https://commitizen-tools.github.io/commitizen/
name = "cz_conventional_commits"
tag_format = "v$version"
version_scheme = "pep440"
version_provider = "pep621"
update_changelog_on_bump = true
major_version_zero = true  # TODO: change it when version >= 1.0.0
version_files = [
    "apc_lemmy_bot/__init__.py:^__version__",
    "docs/source/conf.py:^release",
    "pyproject.toml:^version",
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.build]
generate-setup-file = false
script = "scripts/build.py"

[tool.black]
line-length = 89
include = '\.pyi?$'

[tool.pylint.main]
recursive = true
suggestion-mode = true
exit-zero = true
load-plugins="pylint.extensions.docparams"

[tool.pylint.basic]
docstring-min-length = 5

[tool.pylint.design]

[tool.pylint.exceptions]

[tool.pylint.format]
max-line-length = 89

[tool.pylint.messages_control]

[tool.pylint.imports]

[tool.pylint.logging]
logging-format-style = "new"

[tool.pylint."messages control"]
disable = "empty-comment"  # show errors with the license header

[tool.pylint.method_args]

[tool.pylint.miscellaneous]

[tool.pylint.refactoring]

[tool.pylint.reports]
reports = true
score = true

[tool.pylint.similarities]

[tool.pylint.spelling]
spelling-dict = "en_US"
spelling-private-dict-file = "scripts/extended-dictionary.txt"
spelling-ignore-words = "bool, datetime"

[tool.pylint.typecheck]

[tool.pylint.variables]


[tool.mypy]
namespace_packages = false
show_error_context = true
show_column_numbers = true
pretty = true
error_summary = true
warn_return_any = true
warn_redundant_casts = true
warn_unused_configs = true

[[tool.mypy.overrides]]
module = "cx_Freeze.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pythorhead.*"
ignore_missing_imports = true

[tool.taskipy.settings]
use_vars = true

[tool.taskipy.variables]
t_src = "*.py scripts/*.py apc_lemmy_bot"

[tool.taskipy.tasks]
# These tasks can be run with .venv/bin/poetry run task
lint = {cmd = "task lint-mypy && task lint-src && task lint-doc", help = "runs all lint-* tests"}
lint-src = {cmd = "pylint --enable-all-extensions {t_src}", help = "runs pylint"}
lint-doc = {cmd = "pydocstyle --convention=numpy {t_src}", help = "runs pydocstyle"}
lint-mypy = {cmd = "mypy {t_src}", help = "runs mypy"}
lintf-src = {cmd = "pylint --enable-all-extensions", help = "runs pylint in a file (argument)"}
lintf-doc = {cmd = "pydocstyle --convention=numpy", help = "runs pydocstyle in a file (argument)"}
lintf-mypy = {cmd = "mypy", help = "runs mypy in a file (argument)"}
clean = {cmd ="python scripts/clean.py", help = "runs scripts/clean.py" }
