[project]
# Used by cx_Freeze
name = "apc-lemmy-bot"
version = "0.5.3"
description = "Post supabase events to a Lemmy instance or show them."
maintainers = [
    {name="Carles Muñoz Gorriz", email="carlesmu@internautas.org"}
]
authors = [
    {name="Carles Muñoz Gorriz", email="carlesmu@internautas.org"}
]
license = "AGPL-3.0-or-later"
readme = "README.md"
keywords = ["lemmy"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Operating System :: OS Independent",
]
requires-python = ">=3.10,<3.14"
dependencies = [
    "typer (>=0.16.0,<1.0.0)",
    "typing-extensions (>=4.13.2,<5.0.0)",
    "supabase (>=2.15.2,<3.0.0)",
    "pythorhead (>=0.33.0,!=0.34.0,<1.0.0)",
    "sqlalchemy (>=2.0.41,<2.1.0)",
    "sqlalchemy-utils (>=0.41.2,<0.42.0)",
]

[project.scripts]
apc_lemmy_bot = "apc_lemmy_bot.__main__:main"

[tool.poetry]
packages = [
    {include = "apc_lemmy_bot"}
]
include = [
    { path = "docs/source", format = ["sdist"] },
    "docs/make.bat",
    "docs/Makefile",
    { path = "scripts", format = ["sdist"] },
    "CHANGELOG.md",
    "LICENSE",
    "README.md",
]
exclude = []

[tool.poetry.dependencies]
python = ">=3.11,<3.14"

[tool.poetry.group.dev.dependencies]
commitizen = ">=4.8.2,<5.0.0"
cx-freeze = ">=8.3.0,<9.0.0"
mypy = ">=1.16.0,<2.0.0"
poetry = ">=2.1.3,<3.0.0"
pre-commit = ">=4.2.0,<5.0.0"
pydocstyle = "^6.3.0"
pylint = {extras = ["spelling"], version = ">=3.3.7,<4.0.0"}
trove-classifiers = "^2025.3.19.19"  # for classifiers in this file
sqlalchemy = {extras = ["mypy"], version = ">=2.0.41,<2.1.0"}  # same version that dependencies=...
taskipy = ">=1.14.1,<2.0.0"
types-sqlalchemy-utils = "^1.1.0"
ruff = "^0.11.13"


[tool.poetry.group."dev.docs".dependencies]
make = "^0.1.6.post2"
numpy = "^2.2.6"
sphinx = "^8.2.3"
sphinx-autoapi = ">=3.6.0,<4.0.0"
sphinx-mdinclude = "^0.6.2"
sphinx-rtd-theme = "^3.0.2"
sphinx-sitemap = "^2.6.0"

[tool.commitizen]
# See: https://commitizen-tools.github.io/commitizen/
name = "cz_conventional_commits"
tag_format = "v$version"
version_scheme = "pep440"
version_provider = "pep621"
update_changelog_on_bump = true
major_version_zero = true  # TODO: change it when version >= 1.0.0
version_files = [
    "apc_lemmy_bot/__init__.py:^__version__",
    "docs/source/conf.py:^release",
    "pyproject.toml:^version",
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.build]
generate-setup-file = false
script = "scripts/build.py"

[tool.pylint.main]
recursive = true
suggestion-mode = true
exit-zero = true
load-plugins="pylint.extensions.docparams"

[tool.pylint.basic]
docstring-min-length = 5

[tool.pylint.design]

[tool.pylint.exceptions]

[tool.pylint.format]
max-line-length = 79

[tool.pylint.messages_control]

[tool.pylint.imports]

[tool.pylint.logging]
logging-format-style = "new"

[tool.pylint."messages control"]
disable = "empty-comment"  # show errors with the license header

[tool.pylint.method_args]

[tool.pylint.miscellaneous]

[tool.pylint.refactoring]

[tool.pylint.reports]
reports = true
score = true

[tool.pylint.similarities]

[tool.pylint.spelling]
spelling-dict = "en_US"
spelling-private-dict-file = "scripts/extended-dictionary.txt"
spelling-ignore-words = "bool, datetime"

[tool.pylint.typecheck]

[tool.pylint.variables]


[tool.mypy]
namespace_packages = false
show_error_context = true
show_column_numbers = true
pretty = true
error_summary = true
warn_return_any = true
warn_redundant_casts = true
warn_unused_configs = true

[[tool.mypy.overrides]]
module = "cx_Freeze.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pythorhead.*"
ignore_missing_imports = true


[tool.ruff]
line-length = 79
indent-width = 4

[tool.ruff.lint]
# On top of the default `select` (`E4`, E7`, `E9`, and `F`)
extend-select = [
    "A",        # flake8-builtins
#    "AIR",      # Airflow
    "ANN",      # flake8-annotations
    "ARG",      # flake8-unused-arguments
    "B",        # flake8-bugbear
    "BLE",      # flake8-blind-except
    "C4",       # flake8-comprehensions
#   "C90",      # mccabe (too complex)
    "COM",      # flake8-commas
#   "CPY",      # flake8-copyright
    "D",        # pycodstyle
    "DJ",       # flake8-django
#   "DOC",      # pydoclint
    "DTZ",      # flake8-datetimez
    "E",        # pycodestyle errors
    "EM",       # flake8-errmsg
    "ERA",      # eradicate
    "EXE",      # flake8-executable
    "F",        # pyflake
    "FAST",     # FastAPI
#   "FIX",      # flake8-fixme
    "FLY",      # flynt
    "FURB",     # refurb
    "G",        # flake8-logging-format
    "I",        # Isort
    "ICN",      # flake8-import-conventions
    "INP",      # flake8-no-pep420
    "INT",      # flake8-gettext
    "ISC",      # flake8-implicit-str-concat
    "LOG",      # flake8-logging
    "N",        # pep8-naming
    "NPY",      # NumPy-specific
#   "PD",       # pandas-vet
    "PERF",     # perflint
    "PGH",      # pygrep-hooks
    "PIE",      # flake8-pie
    "PL",       # pylint
    "PT",       # flake8-pytest-style
    "PTH",      # flake8-use-pathlib
    "PYI",      # flake8-pyi
    "Q",        # flake8-quotes
#   "RSE",      # flake8-raise
    "RET",      # flake8-return
    "RUF",      # Ruff-specific
    "SIM",      # flake8-simplify
    "SLF",      # flake8-self
    "SLOT",     # flake8-slots
    "T10",      # flake8-debugger
#   "T20",      # flake8-print
    "TC",       # flake8-type-checking
#   "TD",       # flake8-todos
    "TID",      # flake8-tidy-imports
    "TRY",      # tryceratops
    "UP",       # pyupgrade
    "W",        # pycodestyle warnings
    "YTT",      # flake8-2020
    ]
ignore = [
    "COM812",   # flake8-commas: missing-trailing-comma
    "D203",     # NumPy: incorrect-blank-line-before-class
    "D212",     # NumPy: multi-line-summary-first-line
    "PERF203",  # perflint: try-except-in-loop
    "PLR0912",  # pylint: too-many-branches
    "PLR0913",  # pylint: too-many-arguments
    "PLR0915",  # pylint: too-many-statements
    ]

[tool.ruff.lint.per-file-ignores]
"docs/source/conf.py" = [
    "INP001",  # flake8-no-pep420: implicit-namespace-package
    ]
"apc_lemmy_bot/database.py" = [
    "N815",    # pep8-naming: mixed-case-variable-in-class-scope
    ]
[tool.ruff.lint.pycodestyle]
# convention = "numpy" # TODO: enable this future feature
# E501 reports lines that exceed the length of 100.
max-line-length = 100


[tool.taskipy.settings]
use_vars = true

[tool.taskipy.variables]
t_src = "*.py scripts/*.py apc_lemmy_bot"

[tool.taskipy.tasks]
# These tasks can be run with .venv/bin/poetry run task
build = {cmd = "poetry build", help = "builds the package"}
build-all = {cmd = "task build && task docs", help = "builds the package and the docs"}
clean = {cmd = "python scripts/clean.py", help = "runs scripts/clean.py" }
docs-all = {cmd = "task docs-html && task docs-man", help = "creates all docs" }
docs = {cmd = "cd docs && make html", help = "creates html docs" }
docs-man = {cmd = "cd docs && make man", help = "creates manpage" }
lint = {cmd = "task lint-mypy && task lint-src && task lint-doc", help = "runs all lint-* tests"}
lint-src = {cmd = "pylint --enable-all-extensions {t_src}", help = "runs pylint"}
lint-doc = {cmd = "pydocstyle --convention=numpy {t_src}", help = "runs pydocstyle"}
lint-mypy = {cmd = "mypy {t_src}", help = "runs mypy"}
lintf-src = {cmd = "pylint --enable-all-extensions", help = "runs pylint in a file (argument)"}
lintf-doc = {cmd = "pydocstyle --convention=numpy", help = "runs pydocstyle in a file (argument)"}
lintf-mypy = {cmd = "mypy", help = "runs mypy in a file (argument)"}
